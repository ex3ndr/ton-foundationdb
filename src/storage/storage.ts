// @generated by protobuf-ts 2.0.7
// @generated from protobuf file "src/storage/storage.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Shard
 */
export interface Shard {
    /**
     * @generated from protobuf field: int32 workchain = 1;
     */
    workchain: number;
    /**
     * @generated from protobuf field: uint32 seqno = 2;
     */
    seqno: number;
    /**
     * @generated from protobuf field: bytes shard = 3;
     */
    shard: Uint8Array;
}
/**
 * @generated from protobuf message Block
 */
export interface Block {
    /**
     * @generated from protobuf field: repeated Shard shards = 1;
     */
    shards: Shard[];
}
/**
 * @generated from protobuf message TransactionRef
 */
export interface TransactionRef {
    /**
     * @generated from protobuf field: int32 lt = 1;
     */
    lt: number;
    /**
     * @generated from protobuf field: bytes hash = 2;
     */
    hash: Uint8Array;
    /**
     * @generated from protobuf field: bytes address = 3;
     */
    address: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class Shard$Type extends MessageType<Shard> {
    constructor() {
        super("Shard", [
            { no: 1, name: "workchain", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "seqno", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "shard", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Shard>): Shard {
        const message = { workchain: 0, seqno: 0, shard: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Shard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Shard): Shard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 workchain */ 1:
                    message.workchain = reader.int32();
                    break;
                case /* uint32 seqno */ 2:
                    message.seqno = reader.uint32();
                    break;
                case /* bytes shard */ 3:
                    message.shard = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Shard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 workchain = 1; */
        if (message.workchain !== 0)
            writer.tag(1, WireType.Varint).int32(message.workchain);
        /* uint32 seqno = 2; */
        if (message.seqno !== 0)
            writer.tag(2, WireType.Varint).uint32(message.seqno);
        /* bytes shard = 3; */
        if (message.shard.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.shard);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Shard
 */
export const Shard = new Shard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Block$Type extends MessageType<Block> {
    constructor() {
        super("Block", [
            { no: 1, name: "shards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Shard }
        ]);
    }
    create(value?: PartialMessage<Block>): Block {
        const message = { shards: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Block>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Block): Block {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Shard shards */ 1:
                    message.shards.push(Shard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Block, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Shard shards = 1; */
        for (let i = 0; i < message.shards.length; i++)
            Shard.internalBinaryWrite(message.shards[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Block
 */
export const Block = new Block$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionRef$Type extends MessageType<TransactionRef> {
    constructor() {
        super("TransactionRef", [
            { no: 1, name: "lt", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "address", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TransactionRef>): TransactionRef {
        const message = { lt: 0, hash: new Uint8Array(0), address: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TransactionRef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionRef): TransactionRef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lt */ 1:
                    message.lt = reader.int32();
                    break;
                case /* bytes hash */ 2:
                    message.hash = reader.bytes();
                    break;
                case /* bytes address */ 3:
                    message.address = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransactionRef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lt = 1; */
        if (message.lt !== 0)
            writer.tag(1, WireType.Varint).int32(message.lt);
        /* bytes hash = 2; */
        if (message.hash.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.hash);
        /* bytes address = 3; */
        if (message.address.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TransactionRef
 */
export const TransactionRef = new TransactionRef$Type();
